#!/bin/sh
set -e

export PKGDEST="$(pwd)/build/packages"
export SRCDEST="$(pwd)/build/sources"

error() {
    echo -e "\033[1;31mERROR:\033[0m \033[1m${1}\033[0m"
}

build_package()
{
    local package="$1"

    fetch_sources "${package}"

    for pgp_key in $(get_pgp_keys "${package}"); do
        gpg --recv-keys "${pgp_key}"
    done

    for dependency in $(get_dependencies "${package}"); do
        if ! pacman -Qi "$dependency" > /dev/null; then
            if ! package_in_official_repo $dependency; then
                build_publish_install $dependency
            else
                sudo pacman --noconfirm -S $dependency
            fi
        fi
    done

    mkdir -p "${PKGDEST}" "${SRCDEST}"
    (cd "build/snapshots/${package}" && makepkg --clean --force --noconfirm --syncdeps)

    perl-rename 's/[?<>\\:*|\"]/./g' build/packages/$1-*.pkg.tar.xz
}

remote_exists() {
    return $(curl -s -o /dev/null -I --fail "$1")
}

fetch_sources() {
    local url="https://aur.archlinux.org/cgit/aur.git/snapshot/$1.tar.gz"
    mkdir -p "build/snapshots"
    if ! remote_exists "${url}"; then
        error "package $1 not found in AUR"
        return 1
    fi
    curl "${url}" \
        | tar --extract --gzip --verbose --directory='build/snapshots'
}

# TODO: Remove versions (e.g. X>=Y)
get_dependencies() {
    (cd "build/snapshots/$1" &&
        bash -c 'source PKGBUILD && echo ${depends[@]} ${makedepends[@]}') \
            | sed --regexp-extended 's/>[^ ]+//g'
}

package_in_official_repo() {
    pacman -Ss "^$1$" > /dev/null
}

get_pgp_keys() {
    (cd "build/snapshots/$1" &&
        bash -c 'source PKGBUILD && echo ${validpgpkeys[@]}')
}

add_package_to_repo() {
    mkdir -p build/repo
    cp /var/lib/pacman/sync/$USERNAME.db build/repo/$USERNAME.db.tar.xz
    repo-add --new --remove build/repo/$USERNAME.db.tar.xz build/packages/$1-*.pkg.tar.xz
    sudo cp build/repo/$USERNAME.db.tar.xz /var/lib/pacman/sync/$USERNAME.db
}

delete_asset() {
    local release=$(curl -X GET https://api.github.com/repos/$USERNAME/$REPO/releases/tags/latest)
    local ASSET_ID=$(echo $release | jq ".assets[] | select(.name|test(\"$1\")).id")
    if [[ ! -z "$ASSET_ID" ]]; then
        curl -H "Authorization: token $GITHUB_TOKEN" \
            -X DELETE https://api.github.com/repos/$USERNAME/$REPO/releases/assets/$ASSET_ID
    fi
}

publish_package() {
    local release=$(curl -X GET https://api.github.com/repos/$USERNAME/$REPO/releases/tags/latest)
    local RELEASE_ID=$(echo $release | jq -r '.id')
    
    delete_asset "$1-.*.pkg.tar.xz"
    delete_asset "$USERNAME.db"

    files=(build/packages/$1-*.pkg.tar.xz /var/lib/pacman/sync/$USERNAME.db)
    for f in "${files[@]}"; do
        curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: $(file --mime-type -b $f)" \
            --data-binary "@$f" \
            "https://uploads.github.com/repos/$USERNAME/$REPO/releases/$RELEASE_ID/assets?name=$(basename $f)"
    done
}

build_publish_install() {
    build_package $1
    add_package_to_repo $1
    publish_package $1
    sudo pacman --noconfirm -U build/packages/$1-*.pkg.tar.xz
}

fold_start() {
    echo -e "travis_fold:start:$1\033[33;1m$2\033[0m"
}

fold_end() {
    echo -e "\ntravis_fold:end:$1\r"
}


if [[ -z "$GITHUB_TOKEN" ]]; then
    echo "Error: GITHUB_TOKEN not provided" >&2
    exit 1
fi

if [[ -z "$USERNAME" ]]; then
    echo "Error: USERNAME not specified" >&2
    exit 1
fi

if [[ -z "$REPO" ]]; then
    echo "Error: REPO not specified" >&2
    exit 1
fi

for dep in $DEP; do
    sudo pacman --noconfirm -S $dep
done

for pkg in $@; do
    fold_start $pkg
    sudo pacman --noconfirm -Syu
    build_publish_install $pkg
    fold_end $pkg
done

